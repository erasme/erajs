
Liste de choses à faire:
------------------------

* - Dans scrollingarea permettre de desactiver la fonction
    de scrolling en vertical ou en horizontal. Dans ce cas,
    la scrolling area réclame l'espace nécessaire pour les
    enfants en vertical ou horizontal.
* - Virer le code de positionnement de Ui.Container ainsi
    que la gestion du padding (à déplacer dans VBox, HBox, LBox)
* - Créer LBox pour remplacer la logique de positionnement par
    couche de Ui.Container

* - Créer Ui.IconList et Ui.IconListItem pour le rendu des
    listes en icone

x - Remplacer VBox, HBox et LBox par StackPanel avec le choix du mode

* - Proposer une option "autoscale" pour les App

* - Dans l'Accordeon, cacher les éléments (avec display: none) lorsqu'ils
    ne sont plus du tout visible. Cela devrait permettre de gagner des ressources

* - Dans Ui.App, ne plus utiliser append, fournir une méthode setContent

- Dans Ui.App, permettre de fournir un dépôt de police de caractère. Les éléments
  texte comme Label et Text doivent utiliser ce dépôt pour charger la police
  et recalculer la taille du texte lorsqu'elle est disponible

* - Dans Ui.Container, fournir des fonctions pour réordonner les fils
    et une fonction pour remplacer un element par un autre

* - Changer la gestion de updateRender. invalidateRender doit créer une liste chainée
    rattaché à Ui.App.current qui l'on parcours dans update

- invalidateMeasure doit informer le parent mais le parent doit
  pouvoir ou pas faire suivre a son parent. Passer donc par une methode
  que l'on peut surcharger pour gérer cela

* - Fournir l'accès aux box-shadow dans Ui.Rectangle

- Fournir un ButtonBox + HButtonBox + VButtonBox (et inserer
  des éléments dedans)

- voir pour intégrer les animations dans le "update" de Ui.App
  (ordre logique: event, anim, render, measure, arrange)

- dans Ui.Scrollable envoyer systématiquement comme taille minimum
  la taille de barre de scroll

- dans Ui.App update, gérer la mise à jour de l'arbre de rendu
  d'abords et le rendu graphique à la fin (en gros, séparer
  l'updateRender en 2)

X - dans Ui.Button, fournir une propriété "variant" ou "ui"
    pour proposer différents "style" de bouton comme:
	  - normal
	  - normal-left
	  - normal-right
	  - normal-middle
	  - toolbar
	  - toolbar-left
	  - toolbar-right
	  - toolbar-middle

- Proposer un style différent pour les menus, les dialogs
  style que les menus et les dialogs appliqueront aux éléments
  enfants (avec les propriétés génériques: background, spacing...)

* - pour Ui.Rectangle, supprimer un niveau de div. Modifier le drawing
    pour l'affichage.

* - pour Ui.Color faire un parser pour #rgb #rrggbb rgb(r,g,b) rgba(r,g,b,a)
    dans Ui.Color.create

- dans Scrollable, ne laisser la possiblité à l'utilisateur de fixer
  l'offset uniquement relatif (entre 0 et 1). Si l'offset est en relatif
  mettre à jour le positionnement absolue dans arrange.

- pour TextArea, ne pas gérer de scroll bar mais agrandir la zone autant qu'il
  faut (en hauteur) (à discuter)

- Problème avec l'iPad. Si le clavier virtuel est ouvert et que l'on recalcul
  la taille de la fenêtre. On perd la taille du clavier virtuel. Lorsqu'il ferme
  le clavier virtuel. Il ne nous informe pas de l'augmentation de la taille.
  SALOPERIE D'APPLE.

- dans Ui.Container appendChild... ne doit pas utiliser invalidateMeasure
  mais onChildInvalidateMeasure()

* - virer la gestion des resources sur les styles dans Ui.Button et Ui.Element
    ça ne vaut pas le coup.

- virer "target" dans Anim.Clock. Laisser chacun gérer comme il faut comme
  dans Ui.TransitionBox.

- Ui.ListView rame, optimiser tout cela

- Prendre en compte le côté "utilise ou pas la contrainte" dans le mesure
  des éléments afin d'éviter les measures multiples lorsqu'elles ne servent
  à rien.

* - faire Ui.Shape pour du dessin vectoriel simple cross plateform

- Faire un composant pour intégrer le framework non pas dans une page
  mais dans un DIV

- Faire de la documentation automatique (voir le fonctionnement de Doxygen)

- Dans Ui.Frame, gérer les cas où la frame et trop petit pour ses arrondis
  et sa largeur

* - Fournir une classe Ui.Shadow pour dessiner des ombres et ne plus être
    dépendant de 'box-shadow'

* - Passer Ui.Rectangle en une classe dérivée de Ui.Shape

- Implémenter un 'fill' pour Ui.Shape qui supporte les textures à base
  d'image (Ui.ImageBrush)

- Utiliser getValue() et setValue() pour tous les éléments qui renvoie
  une valeur (comme Ui.CheckBox par exemple)

- Régler le problème de la sélection du text dans Opera quand on en veux pas
  et dans IE < 9

* - Dans Ui.Notebook, gérer le clavier et le focus qui doit être uniquement disponible
    pour l'élément en cours.

* - Dans Ui.Notebook faire comme dans Ui.Accordeonable = un event "change" et 
    "select", "unselect"

- Sur un iPad, améliorer la gestion du clavier virtuel (commencer par détecter
  qu'il est ouvert et permettre ) 

* - Implémenter la nouvelle version des WebSocket disponible dans Chrome 14
    http://tools.ietf.org/html/draft-ietf-hybi-thewebsocketprotocol-10

- Dans Ui.Accordeon, gérer le clavier (peut être créer Ui.Accordeonable
  et fournir un des graphismes pour Ui.Accordeon)

- Permettre le clic droit pour copier/coller sur le texte selectionnable
  (voir si on peut faire cela avec un menu popup maison)

- Améliorer le clipping du contenu dans Ui.Switch

- Gérer le problème de la capture des évènements de la souris par les IFrames

- Améliorer la gestion de la vidéo pour le gestion du buffering

- Voir si on fournit un Ui.VideoPlayer

- Fournir un Ui.DragOverable comme Ui.MouseOverable mais pour le survol
  des Drag & Drop

- Améliorer le "feedback" pour la négociation du drag & drop

- Voir pour rendre transparent aux évènements souris/doigts toutes les balises
  de positionnement (DIV). Peut être n'utiliser que les Ui.Shape pour cette
  détection de collision.

- Voir si on peu supprimer les "rémanences" de rendu VML dans IE < 9

* - Le notebook ne fonctionne pas dans Firefox 3.6 à corriger (gestion
    non fonctionnel des dégradés linéaires en SVG)

* - Dans Ui.Accordeon mettre un event "unselect" sur les pages et un
    event "change" sur l'accordeon au changement de page active

* - Dans Ui.ListView permettre de sélectionner une ligne à partir du
    code Javascript (ex: selectRow(..))

* - Dans les styles permettre l'héritage des styles pour le style static
    par défaut

- autoConfig dans le constructeur. Vérifier si on n'utilise pas des attributs
  inutilisé. Pouvoir définir les attributs indispensables

- permettre de mettre du code de débuggage (des tests supplémentaires)
  dans un preprocesseur et l'enlever dans la version compiler.

- corriger l'icone "edit"

* - faire fonctionner le "doubleclick" dans IE < 9

* - BUG dans le drag & drop émulé, les parties VML n'apparaissent pas

- BUG dans le drag & drop émulé, les parties VML apparaissent en blanc

- gérer la sélection et la non sélection dans IE < 9

- gérer le clic droit dans IE < 9

- créer un Ui.Combo comme bouton avec une liste de choix

- mettre en place un système de type de donnée avec interface de
  rendu par type et par type d'interface (formulaire, tableau...).
  Un peu comme dans ListView qui manipule des "data" et pas de l'ui
  mais étendre tout cela et créer les formulaires.

* - rendre le Ui.Label stylisable pour les valeurs par défaut

* - implémenter l'héritage des class dans les styles hérités dans le DOM
    (comme pour les styles statiques)

- probleme dans les transitions box, si on a 3 elements, que l'on passe du 1 au 2
  et du 2 au trois avant d'avoir fini la transition du 1 au 2, on se retrouve
  dans un état de transparence intermédiaire

- si on place un uploadable dans une dropbox sous Firefox 3.6, on ne peut
  pas cliquer (rien ne se passe) sur l'uploadable

